
pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret')
    }

    stages {
        stage('CLONE SCM') {
            steps {
                echo 'Cloning code from GitHub...'
                git branch: 'main', url: 'https://github.com/adarsh0331/ultimate-devops-project-aws.git'
            }
        }

        stage('Install Terraform') {
            steps {
                script {
                    sh '''
                        TERRAFORM_VERSION="1.6.6"
                        if ! command -v unzip &> /dev/null; then
                            echo "Installing unzip..."
                            sudo apt-get update && sudo apt-get install -y unzip
                        fi
                        if ! command -v terraform &> /dev/null; then
                            echo "Installing Terraform..."
                            curl -LO https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                            unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                            sudo mv terraform /usr/local/bin/
                            rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                        else
                            echo "Terraform is already installed."
                        fi
                        terraform --version
                    '''
                }
            }
        }

        stage('Terraform Init') {
            steps {
                echo 'Initializing Terraform...'
                sh '''
                    cd eks-install
                    terraform init
                '''
            }
        }

        stage('Terraform Plan') {
            steps {
                echo 'Running Terraform Plan...'
                sh '''
                    cd eks-install
                    terraform plan -out=tfplan
                '''
            }
        }

        stage('Terraform Apply') {
            steps {
                echo 'Applying Terraform changes...'
                sh '''
                    cd eks-install
                    terraform apply -auto-approve tfplan
                '''
            }
        }

        stage('Retrieve Public IP') {
            steps {
                script {
                    echo 'Retrieving Terraform Outputs...'
                    def publicIp = sh(script: 'cd eks-install && terraform output -raw public_ip', returnStdout: true).trim()
                    echo "Public IP of the EC2 instance: ${publicIp}"
                }
            }
        }

        stage('Terraform Destroy') {
            steps {
                input {
                    message "Do you want to destroy the infrastructure?"
                    ok "Destroy"
                }
                echo 'Destroying Terraform Infrastructure...'
                sh '''
                    cd eks-install
                    terraform destroy -auto-approve
                '''
            }
        }
    }

    post {
        success {
            echo 'Terraform deployment completed successfully!'
        }
        failure {
            echo 'Terraform deployment failed. Check the logs for details.'
        }
        always {
            cleanWs()
        }
    }
}
